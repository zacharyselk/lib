// Bubble sort is one of the simplest sorting methods there is, it is very
// intuitive, but also ineffeciant. Bubble sort will compair each of the n-1
// ajacent pairs, swapping them if the left element is greater than the right
// element. Repeating this process n times to ensure that the list is fully
// sorted.
//
// Bubble sort will allways perform (n-1)*n equality checks and between 0 and
// (n-1)*n swap operations, making this a O(n^2) algorithm

#ifndef LIB_BUBBLE_SORT_H
#define LIB_BUBBLE_SORT_H

template<typename T>
void bubbleSort(T &arrayBegining, T &arrayEnd)
{
  unsigned int arrayLength = &arrayEnd - &arrayBegining;
  int dataSize = sizeof(arrayBegining);
  
  // If the array is empty, then it is already sorted
  if(arrayLength == 0)
    return;

  for(int counter = 0; counter < arrayLength; ++counter)
    for(int iterator = 1; iterator < arrayLength; ++iterator)
      if(*(&arrayBegining+iterator*dataSize) <
	 *(&arrayBegining+(iterator-1)*dataSize))
	{
	  // Swap the elements using bitwise "exclusive or"
	  *(&arrayBegining+iterator*dataSize) =
	    *(&arrayBegining+iterator*dataSize) ^
	    *(&arrayBegining+iterator*dataSize);
	  
	  *(&arrayBegining+(iterator-1)*dataSize) =
	    *(&arrayBegining+iterator*dataSize) ^
	    *(&arrayBegining+(iterator-1)*dataSize);
	  
	  *(&arrayBegining+iterator*dataSize) =
	    *(&arrayBegining+iterator*dataSize) ^
	    *(&arrayBegining+(iterator-1)*dataSize);
	}
}

#endif
